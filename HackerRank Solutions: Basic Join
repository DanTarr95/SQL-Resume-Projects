1. Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Answer: SELECT SUM(city.population) FROM COUNTRY LEFT JOIN CITY ON country.code = city.countrycode WHERE country.continent = 'Asia';

2. Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Answer: SELECT city.name FROM CITY Join country ON city.countrycode = country.code WHERE country.continent = 'Africa';

3. Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
Answer: SELECT country.continent, FLOOR(AVG(city.population)) FROM COUNTRY JOIN CITY ON city.countrycode = country.code GROUP BY country.continent;

4. You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
Write a query to help Eve.
Answer: SELECT CASE
         WHEN G.grade > 7 THEN S.name
         ELSE NULL
       end AS names,
       G.grade,
       S.marks
FROM   students S
       JOIN grades G
         ON S.marks BETWEEN G.min_mark AND G.max_mark
ORDER  BY G.grade DESC,
          names ASC,
          S.marks ASC; 
          
5. Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
Answer: SELECT H.hacker_id, 
       H.name 
FROM   submissions S 
       JOIN challenges C 
         ON S.challenge_id = C.challenge_id 
       JOIN difficulty D 
         ON C.difficulty_level = D.difficulty_level 
       JOIN hackers H 
         ON S.hacker_id = H.hacker_id 
            AND S.score = D.score 
GROUP  BY H.hacker_id, 
          H.name 
HAVING Count(S.hacker_id) > 1 
ORDER  BY Count(S.hacker_id) DESC, 
          S.hacker_id ASC; 
          
6. Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.
Answer: SELECT a.id, 
       b.age, 
       a.coins_needed, 
       a.power 
FROM   wands a 
       JOIN wands_property b 
         ON a.code = b.code 
WHERE  b.is_evil = 0 
       AND a.coins_needed = (SELECT Min(a1.coins_needed) 
                             FROM   wands a1 
                                    JOIN wands_property b1 
                                      ON a1.code = b1.code 
                             WHERE  b.age = b1.age 
                                    AND a.power = a1.power) 
ORDER  BY a.power DESC, 
          b.age DESC;
          
7. Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.
Answer: SELECT H.hacker_id, H.name, COUNT(C.challenge_id) AS total_count
FROM Hackers H JOIN Challenges C
ON H.hacker_id = C.hacker_id
GROUP BY H.hacker_id, H.name
HAVING total_count = 
(
SELECT COUNT(temp1.challenge_id) AS max_count
    FROM challenges temp1
    GROUP BY temp1.hacker_id
    ORDER BY max_count desc
    LIMIT 1
)
OR total_count IN
(
    SELECT DISTINCT other_counts FROM (
SELECT H2.hacker_id, H2.name, COUNT(C2.challenge_id) AS other_counts
FROM Hackers H2 JOIN Challenges C2
ON H2.hacker_id = C2.hacker_id
GROUP BY H2.hacker_id, H2.name
) temp2
    GROUP BY other_counts
HAVING COUNT(other_counts) =1)
ORDER BY total_count desc, H.hacker_id;

8. You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!
The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result.
Answer: SELECT h.hacker_id, h.name, SUM(MAX_SCORE.t1) as total_score
FROM Hackers h inner join 
(
    SELECT MAX(s.score) as t1, s.hacker_id  
    FROM Submissions s
    GROUP BY s.challenge_id, s.hacker_id
    HAVING t1 > 0
) AS MAX_SCORE
ON h.hacker_id = MAX_SCORE.hacker_id
GROUP BY h.hacker_id, h.name
ORDER BY total_score DESC, hacker_id ASC;
